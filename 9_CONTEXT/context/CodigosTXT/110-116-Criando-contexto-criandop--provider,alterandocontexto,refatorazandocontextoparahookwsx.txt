O provinder vai deliitar onde o contexto é utilizado 

vamos criar uma espécie de componente com a prop children 

E este provider deve encapsular os demais componentes em que precisamos consultar ou alterar o valor ;


Geralmente ele fica em App.js ou em index.js

Agora poderemos compartilhar o valor do contexto em todos os componentes



-------FIM--------------------

Alterando o contexto

Para alterar o valor do contexto precisamos criar um componente que utilize a função da mudança de contexto;

Esta mudança ocorrerá no context e poderá ser consumida por todos os componentes que recebem o contexto;

E assim finalizamos o ciclo da context API;

----------FIM-------------------


113. Refatorando context com hook

Podemos criar um hook para utilizar o contexto, isso nos ´da algumas vantagens

Não precisamos importar o useContext em todos os lugares que vamos usar o contexto, só o hook;

Temos um espaço para fazer uma validação do contexto;

-----------FIM----------------

Contexto mais complexo

Contextos mais complexos podem ter variações no comportamento;

Para isso vamos utilizar um hook chamado useReducer;

Que é como um UseState, mas para controle de dados mais complexos

No reducer teremos diferentes ações com um switch;

E na aplicação vamos ocnsumir o estado atual do dado que está no reducer; 


----------FIM----------------

Alterando contexto complexo 

Para alterar o contexto vamos utilizar uma função chamada dispatch;

Ela estará no reducer também;

E deve conter todas as informações necessárias para a alteração do valor do contexto;

Ou seja, o switch entra em ação e retorna um novo contexto 